#version 450
/*
See LICENSE.md for vkpolybench and other 3rd party licenses. 
*/
/*
Data types, sizes and other constants are defined in the following header file.
Warning: if GLSL_TO_SPV_UPDATE_COMPILATION_CHECK in VulkanCompute.h is defined,
be advised that changes in HDcommon.h will NOT trigger a glsl to spv translation.
*/
#include "HDcommon.h"

layout(local_size_x_id = 1) in;                
layout(local_size_y_id = 2) in;
layout(local_size_z_id = 3) in;

layout(std430) buffer;

layout(set = 0, binding = 4) buffer d_a
{
    DATA_TYPE elements[];
}
a;

layout(set = 0, binding = 5) buffer d_b
{
    DATA_TYPE elements[];
}
b;

layout(set = 0, binding = 6) buffer d_x
{
    DATA_TYPE elements[];
}
x;

layout(set = 0, binding = 7) buffer d_y
{
    DATA_TYPE elements[];
}
y;

layout(set = 0, binding = 8) buffer d_tmp
{
    DATA_TYPE elements[];
}
tmp;

void main()
{

    const uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * gl_WorkGroupSize.x;
   
	if (i < N)
	{
		int j;
		for(j = 0; j < N; j++)
		{	
			tmp.elements[i] += a.elements[i * N + j] * x.elements[j];
			y.elements[i] += b.elements[i * N + j] * x.elements[j];
		}
		y.elements[i] = ALPHA * tmp.elements[i] + BETA * y.elements[i];
	}
}
