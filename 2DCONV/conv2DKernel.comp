#version 450
/*
See LICENSE.md for vkpolybench and other 3rd party licenses. 
*/
/*
Data types, sizes and other constants are defined in the following header file.
Warning: if GLSL_TO_SPV_UPDATE_COMPILATION_CHECK in VulkanCompute.h is defined,
be advised that changes in HDcommon.h will NOT trigger a glsl to spv translation.
*/
#include "HDcommon.h"

layout(local_size_x_id = 1) in;                
layout(local_size_y_id = 2) in;
layout(local_size_z_id = 3) in;

layout(std430) buffer;

layout(set = 0, binding = 4) buffer d_A
{
    DATA_TYPE elements[];
}
A;

layout(set = 0, binding = 5) buffer d_B
{
    DATA_TYPE elements[];
}
B;

void main()
{

    const uint j = gl_LocalInvocationID.x + gl_WorkGroupID.x * gl_WorkGroupSize.x;
    const uint i = gl_LocalInvocationID.y + gl_WorkGroupID.y * gl_WorkGroupSize.y;

    DATA_TYPE c11, c12, c13, c21, c22, c23, c31, c32, c33;

	c11 = +0.2;  c21 = +0.5;  c31 = -0.8;
	c12 = -0.3;  c22 = +0.6;  c32 = -0.9;
	c13 = +0.4;  c23 = +0.7;  c33 = +0.10;

    if ((i < NI-1) && (j < NJ-1) && (i > 0) && (j > 0))
	{
		B.elements[i * NJ + j] =  c11 * A.elements[(i - 1) * NJ + (j - 1)]  + c21 * A.elements[(i - 1) * NJ + (j + 0)] + c31 * A.elements[(i - 1) * NJ + (j + 1)] 
			+ c12 * A.elements[(i + 0) * NJ + (j - 1)]  + c22 * A.elements[(i + 0) * NJ + (j + 0)] +  c32 * A.elements[(i + 0) * NJ + (j + 1)]
			+ c13 * A.elements[(i + 1) * NJ + (j - 1)]  + c23 * A.elements[(i + 1) * NJ + (j + 0)] +  c33 * A.elements[(i + 1) * NJ + (j + 1)];
	}
 
}

